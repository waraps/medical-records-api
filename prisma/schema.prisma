// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Rol {
  id Int @id @default(autoincrement())

  name String @unique

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model User {
  id Int @id @default(autoincrement())

  first_name String
  last_name String
  dni String
  avatar String?
  email String @unique
  password String

  rol_id Int @default(2)
  rol Rol @relation(fields: [rol_id], references: [id])

  // user (receptionist) could have created many patients
  patients Patient[]

  // user (doctor) can have many medical appointments and  records
  med_appointments MedicalAppointments[]
  records Record[]

  openToAppointment Boolean @default(true)

  refresh_token String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model PetSex {
  id Int @id @default(autoincrement())

  name String @unique

  patients Patient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pet_sex")
}

model Owner {
  id Int @id @default(autoincrement())

  first_name String
  last_name String
  dni String @unique
  phone String
  address String
  email String
  occupation String
  housing String
  other_pets Boolean
  avatar String?

  pets Patient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("owners")
}

model Patient {
  id Int @id @default(autoincrement())
  avatar String?
  specie String
  race String
  name String
  birth DateTime
  color String

  sex_id Int
  pet_sex PetSex @relation(fields: [sex_id], references: [id])

  neutered Boolean

  owner_id Int @default(2)
  owner Owner @relation(fields: [owner_id], references: [id])

  records Record[]

  // user (receptionist) can create many patients
  created_by Int
  user User @relation(fields: [created_by], references: [id])

  // user (doctor) can have many medical appointments
  med_appointments MedicalAppointments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patients")
}

model Record {
  id Int @id @default(autoincrement())

  reason String?
  revelevant_clinic String?
  diagnosis String?
  treatment String?
  weight Float?

  patient_id Int
  patient Patient @relation(fields: [patient_id], references: [id])

  // user (doctor) can create many records
  created_by Int
  user User @relation(fields: [created_by], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("records")
}

model Test {
  id Int @id @default(autoincrement())

  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tests")
}

model MedicalAppointments {
  id Int @id @default(autoincrement())

  status String
  patient_id Int
  patient Patient @relation(fields: [patient_id], references: [id])

  doctor_id Int?
  doctor User? @relation(fields: [doctor_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medical_appointments")
}
